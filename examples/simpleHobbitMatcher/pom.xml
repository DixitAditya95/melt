<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>eu.jan-portisch</groupId>
    <artifactId>simpleMeltHobbitMatcher</artifactId><!-- id used as matcher id in descriptor file of seals package and as the project name in gitlab (hobbit) -->
    <packaging>jar</packaging>
    <version>1.0</version><!-- version appearing in descriptor file of seals package and system.ttl file in hobbit -->
    <description>demo matcher description</description><!-- description appearing in descriptor file of seals package and system.ttl file in hobbit -->
    
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        
        <oaei.mainClass>de.uni_mannheim.informatik.dws.melt.demomatcher.SimpleStringMatcher</oaei.mainClass><!-- mandatory: this class has to implement IOntologyMatchingToolBridge -->
        <oaei.copyright>(C) Mannheim, 2019</oaei.copyright> <!--optional copyright appearing in the seals descriptor file -->
        <oaei.license>GNU Lesser General Public License 2.1 or above</oaei.license> <!--optional license appearing in the seals descriptor file -->

        <maven.deploy.skip>true</maven.deploy.skip><!-- needed to call mvn deploy without having a distributionManagement -->
        <matching.version>2.5</matching.version> <!-- version for all matching related packages -->
    </properties>
    
    <!-- Accessing the resources:
    - all files in "oaei-resources" folder are stored in the current working directory and can be accessed with 
          Files.readAllLines(Paths.get("oaei-resources", "configuration_oaei.txt"));
    - all files in "src/main/resources" folder are compiled to the resulting jar and can be accessed with
          getClass().getClassLoader().getResourceAsStream("configuration_jar.txt");
    -->
    
    <dependencies>
        <!-- dependency for jena matchers - for other matchers you can replace it with artifactId: matching-base -->
        <dependency>
            <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
            <artifactId>matching-jena</artifactId>
            <version>${matching.version}</version>
        </dependency>

        <dependency>
            <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
            <artifactId>matching-eval</artifactId>
            <version>${matching.version}</version>
            <scope>test</scope>
            <!-- only in test scope, can only be used when running tests. 
                 You can also remove the scope but then remove the whole dependency when packaging the matcher.
                 Otherwise you get a lot of unused dependencies in your matcher.-->
        </dependency>
        
        <!-- This dependency is necessary for hobbit submission. It contains the wrapper. -->
        <dependency>
            <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
            <artifactId>hobbit-wrapper</artifactId>
            <version>${matching.version}</version>
        </dependency>
        
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.25</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>

            <!-- the following plugin will:
            1. create a project (if not already existent) in gitlab with the name of the artifactId
            2. create or update a system.ttl file which describes the matching system so that version and implementing benchmarks are updated
            3. set the maven property ${hobbit.imageURL} to the correct value which is normally "git.project-hobbit.eu:4567/${username}/${artifactId}:${project.version}
            (if you create the gitlab project and system.ttl on your own you can comment out this plugin but then you have to set "hobbit.imageURL" in the properties section of this pom.)
            The plugin has to appear before the docker-maven-plugin because it generates the maven property used there.
            To remove the matcher from the platform just delete the Gitlab project.--> 
            <plugin>
                <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
                <artifactId>hobbit-maven-plugin</artifactId>
                <version>${matching.version}</version>
                <configuration>
                    <!-- inline authConfig not recommended but possible - better use settings xml (one example is shown at the end of the file
                    <accesstoken>{accesstoken}</accesstoken>  -->
                    <benchmarks>
                        <!-- in case you change the benchmarks, you also have to increase your version number -->
                        <benchmark>bench:AnatomyAPI</benchmark>
                        <benchmark>bench:ConferenceAPI</benchmark>
                        <benchmark>bench:SpatialAPI</benchmark>
                        <benchmark>bench:knowledgegraph</benchmark>
                        <benchmark>bench:LargebioAPI</benchmark>
                    </benchmarks>
                </configuration>
                <executions>
                    <execution>
                        <goals><goal>prepareGitlab</goal></goals>
                    </execution>
                </executions>
            </plugin>


            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.26.0</version>                
                <configuration>
                    <!-- further machine configuration options: https://dmp.fabric8.io/#docker-machine
                    uncomment the following line in case you have installed docker on windows or mac-->
                    <!--machine><name>default</name></machine-->
                    
                    <!-- inline authConfig not recommended but possible - better use settings xml (one example is shown at the end of the file 
                         see also https://dmp.fabric8.io/#authentication
                    <authConfig>
                        <username>{username}</username>
                        <password>{password}</password>
                    </authConfig>  -->
                    <images>
                        <image>
                            <name>${oaei.imageURL}</name>
                            <build>
                                <from>openjdk:8-jre-alpine</from><!--change it to a docker base image you want - this is just a small image which contains java-->
                                <assembly><descriptorRef>hobbit</descriptorRef></assembly>
                                <env><OAEI_MAIN>${oaei.mainClass}</OAEI_MAIN></env>
                                <!-- if you develop for SPIMBENCH benchmark, then replace the last parameter with: de.uni_mannheim.informatik.dws.melt.hobbit_wrapper.spimbench.HobbitSPIMBENCHWrapper  (works with Melt 2.6-SNAPSHOT or above)-->
                                <cmd><shell>java -cp "${project.build.finalName}.${project.packaging}:lib/*" org.hobbit.core.run.ComponentStarter de.uni_mannheim.informatik.dws.melt.hobbit_wrapper.HobbitWrapper</shell></cmd>
                                <workdir>/maven</workdir>
                            </build>
                        </image>
                    </images>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>de.uni-mannheim.informatik.dws.melt</groupId>
                        <artifactId>hobbit-assembly</artifactId>
                        <version>${matching.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal><!--install phase-->
                            <goal>push</goal><!--deploy phase-->
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

<!-- config example for settings file which is usually located at ~/.m2/settings.xml (you can create the file if it does not exist)
     username and password are used for pushing the docker image and privateKey is necessary for creating gitlab projects and system.ttl files:
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                      https://maven.apache.org/xsd/settings-1.0.0.xsd">
  <servers>
    <server>
      <id>git.project-hobbit.eu</id>
      <username>{username}</username>
      <password>{password}</password>
      <privateKey>{gitlab_access_token}</privateKey>
    </server>
  </servers>
</settings>

-->

